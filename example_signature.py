# payra-sdk-python/example_signature.py

import time
from payra_sdk import PayraSignatureGenerator, PayraSDKException

# --- Example Payment Data (as received from frontend) ---
# This data should come directly from your frontend, with `amount` already in wei/smallest units.
PAYMENT_DATA = {
    "network": "polygon",
    "tokenAddress": "0xc2132D05D31c914a87C6611C10748AEb04B58e8F", # Example ERC20 Token Address
    "orderId": "ORDER-1753824905006-301-322",
    "amount": 4000000, # wei/smallest units (e.g., 2 * 10^6 for a token with 6 decimals)
    "timestamp": 1753826059, # Unix timestamp (seconds)
    "payerAddress": "0xe6c961D6ad9a27Ea8e5d99e40abaC365DE9Cc162"
}

def run_example():

    print("\nPayment Data received from frontend:")
    for key, value in PAYMENT_DATA.items():
        print(f"  {key}: {value}")

    try:
        # Initialize the signature generator with the backend's private key
        payra_signer = PayraSignatureGenerator()

        # Generate the signature
        print("\nGenerating signature...")
        signature = payra_signer.generate_signature(
            network=PAYMENT_DATA["network"],
            token_address=PAYMENT_DATA["tokenAddress"],
            order_id=PAYMENT_DATA["orderId"],
            amount=PAYMENT_DATA["amount"],
            timestamp=PAYMENT_DATA["timestamp"],
            payer_address=PAYMENT_DATA["payerAddress"],
        )

        print(f"\nSignature generated successfully:")
        print(f"  Signature: {signature}")
        print("\nThis signature should match the one generated by your JS frontend (if it were signing with this private key).")
        print("This is the signature you will send back to the frontend for the `payOrder` contract call.")

        # --- Optional: Verify the signature locally ---
        # This demonstrates how the backend could verify if needed (e.g., if signature came from other source)
        # It should recover the address that matches the private key used for signing.
        print("\n--- Verifying signature locally (optional) ---")
        recovered_address = payra_signer.verify_signature(
            network=PAYMENT_DATA["network"],
            token_address=PAYMENT_DATA["tokenAddress"],
            order_id=PAYMENT_DATA["orderId"],
            amount=PAYMENT_DATA["amount"],
            timestamp=PAYMENT_DATA["timestamp"],
            payer_address=PAYMENT_DATA["payerAddress"],
            signature=signature
        )
        print(f"Recovered address from signature: {recovered_address}")

        local_address = payra_signer.get_account_address(PAYMENT_DATA["network"])

        if recovered_address.lower() == local_address.lower():
            print("Local verification successful: Recovered address matches the signer's address.")
        else:
            print("Local verification FAILED: Recovered address does NOT match the signer's address.")

    except PayraSDKException as e:
        print(f"\nAn error occurred with Payra SDK: {e}")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")

if __name__ == "__main__":
    from eth_account import Account # Needed for example's signer address print
    run_example()
